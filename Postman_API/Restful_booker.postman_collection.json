{
	"info": {
		"_postman_id": "be7c7a08-f436-42e3-b82c-bf73f34ed468",
		"name": "Restful_booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HealthCheck",
			"item": [
				{
					"name": "Ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 201 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ping",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response=pm.response.json();\r",
							"pm.globals.set('token', response.token);\r",
							"\r",
							"let myToken = pm.globals.get('token')\r",
							"\r",
							"pm.test(\"Validate token has been creted\", ()=> {\r",
							"pm.expect(response.token).to.be.eql(myToken)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingIds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200 OK\", function() {\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function(){\r",
							"pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type should be json\", function(){\r",
							"pm.response.to.be.json;\r",
							"pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\")\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contains token\", function(){\r",
							"var jsonData = pm.response.json();\r",
							"pm.expect(jsonData.token).to.be.a('string');\r",
							"pm.expect(jsonData.token).to.not.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"bookingid\": 1\r\n  },\r\n  {\r\n    \"bookingid\": 2\r\n  },\r\n  {\r\n    \"bookingid\": 3\r\n  },\r\n  {\r\n    \"bookingid\": 4\r\n  }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking"
					]
				},
				"description": "Returns the ids of all the bookings that exist within the API. Can take optional query strings to search and return a subset of booking ids."
			},
			"response": []
		},
		{
			"name": "GetBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type should be json\", function () {\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function(){\r",
							"pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Ariana\",\r\n    \"lastname\": \"Andrisan\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2020-12-21\",\r\n        \"checkout\": \"2021-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking"
					]
				},
				"description": "Returns a specific booking based upon the booking id provided"
			},
			"response": []
		},
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"pm.globals.set('bookingId', response.bookingid);\r",
							"let my_bookingId = pm.globals.get(\"bookingId\")\r",
							"pm.test(\"Validate a new booking has been created\",()=>{\r",
							"    pm.expect(response.booking.firstname).eql('Ariana')\r",
							"    pm.expect(response.booking.lastname).eql('Andrisan')\r",
							"    pm.expect(response.booking.totalprice).eql(12345)\r",
							"    pm.expect(response.booking.additionalneeds).eql('Breakfast')\r",
							"    pm.expect(response.bookingid).exist;\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Ariana\",\r\n    \"lastname\": \"Andrisan\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2020-12-21\",\r\n        \"checkout\": \"2021-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type should be json\", function () {\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"pm.test(\"Response time is less than 2000ms\", function(){\r",
							"pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true,
					"content-length": true,
					"host": true,
					"user-agent": true,
					"accept-encoding": true,
					"connection": true,
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Ariana\",\r\n    \"lastname\": \"Andrisan\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2020-12-21\",\r\n        \"checkout\": \"2021-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					],
					"query": [
						{
							"key": "firstname",
							"value": "Ariana",
							"disabled": true
						},
						{
							"key": "lastname",
							"value": "Andrisan",
							"disabled": true
						}
					]
				},
				"description": "Updates a current booking"
			},
			"response": []
		},
		{
			"name": "PartialUpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Ariana\",\r\n    \"lastname\" : \"Andrisan\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				},
				"description": "Updates a current booking with a partial payload"
			},
			"response": []
		},
		{
			"name": "DeleteBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Test precondition: At least one booking exists, so create one\r",
							"var baseURL = pm.environment.get(\"baseURL\");\r",
							"var requestURL = baseURL + \"/booking\";\r",
							"\r",
							"const echoPostRequest = {\r",
							"    url: requestURL,\r",
							"    method: 'POST',\r",
							"    header: 'Content-Type:application/json',\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"firstname\": pm.iterationData.get(\"firstname\"),\r",
							"            \"lastname\": pm.iterationData.get(\"lastname\"),\r",
							"            \"totalprice\": pm.iterationData.get(\"totalprice\"),\r",
							"            \"depositpaid\": pm.iterationData.get(\"depositpaid\"),\r",
							"            \"bookingdates\": {\r",
							"                \"checkin\": pm.iterationData.get(\"checkin\"),\r",
							"                \"checkout\": pm.iterationData.get(\"checkout\")\r",
							"            },\r",
							"            \"additionalneeds\": pm.iterationData.get(\"additionalneeds\")\r",
							"        })\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(echoPostRequest, function (err, res) {\r",
							"    pm.environment.set(\"bookingid\", res.json().bookingid);\r",
							"    var logTitle = pm.info.requestName + \" | \" + pm.info.eventName + \":\\n\";\r",
							"    console.log(err ? err : logTitle + JSON.stringify(res.json(), null, 2));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"1"
					]
				},
				"description": "Returns the ids of all the bookings that exist within the API. Can take optional query strings to search and return a subset of booking ids."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}